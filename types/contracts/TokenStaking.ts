/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FIRST_RELEASE"
      | "SECOND_RELEASE"
      | "THIRD_RELEASE"
      | "TOTAL_STAKING_AMOUNT"
      | "adminManager"
      | "calculateAvailableRelease"
      | "finalReleaseTime"
      | "firstReleaseTime"
      | "getStakingInfo"
      | "icoContractAddress"
      | "releaseTokens"
      | "secondReleaseTime"
      | "setIcoContract"
      | "stakedBalance"
      | "stakingStartTime"
      | "stakingToken"
      | "thirdReleaseTime"
      | "totalReleased"
      | "totalStaked"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "IcoContractUpdated"
      | "TokensReleased"
      | "TokensStaked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FIRST_RELEASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECOND_RELEASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "THIRD_RELEASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_STAKING_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAvailableRelease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalReleaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstReleaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "icoContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondReleaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIcoContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thirdReleaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReleased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FIRST_RELEASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECOND_RELEASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "THIRD_RELEASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_STAKING_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAvailableRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "icoContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIcoContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thirdReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
}

export namespace IcoContractUpdatedEvent {
  export type InputTuple = [newIcoContract: AddressLike];
  export type OutputTuple = [newIcoContract: string];
  export interface OutputObject {
    newIcoContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensReleasedEvent {
  export type InputTuple = [amount: BigNumberish, releasePhase: BigNumberish];
  export type OutputTuple = [amount: bigint, releasePhase: bigint];
  export interface OutputObject {
    amount: bigint;
    releasePhase: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensStakedEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenStaking extends BaseContract {
  connect(runner?: ContractRunner | null): TokenStaking;
  waitForDeployment(): Promise<this>;

  interface: TokenStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FIRST_RELEASE: TypedContractMethod<[], [bigint], "view">;

  SECOND_RELEASE: TypedContractMethod<[], [bigint], "view">;

  THIRD_RELEASE: TypedContractMethod<[], [bigint], "view">;

  TOTAL_STAKING_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  adminManager: TypedContractMethod<[], [string], "view">;

  calculateAvailableRelease: TypedContractMethod<[], [bigint], "view">;

  finalReleaseTime: TypedContractMethod<[], [bigint], "view">;

  firstReleaseTime: TypedContractMethod<[], [bigint], "view">;

  getStakingInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalStaked: bigint;
        _totalReleased: bigint;
        _availableForRelease: bigint;
        _remainingTime: bigint;
      }
    ],
    "view"
  >;

  icoContractAddress: TypedContractMethod<[], [string], "view">;

  releaseTokens: TypedContractMethod<[], [void], "nonpayable">;

  secondReleaseTime: TypedContractMethod<[], [bigint], "view">;

  setIcoContract: TypedContractMethod<
    [_icoContract: AddressLike],
    [void],
    "nonpayable"
  >;

  stakedBalance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  stakingStartTime: TypedContractMethod<[], [bigint], "view">;

  stakingToken: TypedContractMethod<[], [string], "view">;

  thirdReleaseTime: TypedContractMethod<[], [bigint], "view">;

  totalReleased: TypedContractMethod<[], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FIRST_RELEASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECOND_RELEASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "THIRD_RELEASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_STAKING_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "adminManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateAvailableRelease"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finalReleaseTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "firstReleaseTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakingInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalStaked: bigint;
        _totalReleased: bigint;
        _availableForRelease: bigint;
        _remainingTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "icoContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "secondReleaseTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setIcoContract"
  ): TypedContractMethod<[_icoContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakedBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "thirdReleaseTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalReleased"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "IcoContractUpdated"
  ): TypedContractEvent<
    IcoContractUpdatedEvent.InputTuple,
    IcoContractUpdatedEvent.OutputTuple,
    IcoContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensReleased"
  ): TypedContractEvent<
    TokensReleasedEvent.InputTuple,
    TokensReleasedEvent.OutputTuple,
    TokensReleasedEvent.OutputObject
  >;
  getEvent(
    key: "TokensStaked"
  ): TypedContractEvent<
    TokensStakedEvent.InputTuple,
    TokensStakedEvent.OutputTuple,
    TokensStakedEvent.OutputObject
  >;

  filters: {
    "IcoContractUpdated(address)": TypedContractEvent<
      IcoContractUpdatedEvent.InputTuple,
      IcoContractUpdatedEvent.OutputTuple,
      IcoContractUpdatedEvent.OutputObject
    >;
    IcoContractUpdated: TypedContractEvent<
      IcoContractUpdatedEvent.InputTuple,
      IcoContractUpdatedEvent.OutputTuple,
      IcoContractUpdatedEvent.OutputObject
    >;

    "TokensReleased(uint256,uint256)": TypedContractEvent<
      TokensReleasedEvent.InputTuple,
      TokensReleasedEvent.OutputTuple,
      TokensReleasedEvent.OutputObject
    >;
    TokensReleased: TypedContractEvent<
      TokensReleasedEvent.InputTuple,
      TokensReleasedEvent.OutputTuple,
      TokensReleasedEvent.OutputObject
    >;

    "TokensStaked(address,uint256)": TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
    TokensStaked: TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
  };
}
