/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AdminManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AdminListAddress"
      | "addAddress"
      | "addressExists"
      | "removeAddress"
      | "showAllAdmins"
      | "superAdmin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AdminListAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressExists",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "showAllAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "superAdmin",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AdminListAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showAllAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "superAdmin", data: BytesLike): Result;
}

export interface AdminManager extends BaseContract {
  connect(runner?: ContractRunner | null): AdminManager;
  waitForDeployment(): Promise<this>;

  interface: AdminManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AdminListAddress: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addAddress: TypedContractMethod<
    [_newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addressExists: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  removeAddress: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  showAllAdmins: TypedContractMethod<[], [string[]], "view">;

  superAdmin: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AdminListAddress"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addAddress"
  ): TypedContractMethod<[_newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addressExists"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeAddress"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "showAllAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "superAdmin"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
